#==============================================================
#
#  Abs:  Device Support for Agilent 5322 (laser locker)
#
#  Name: Agilent5322.proto.db
#
#  Side:  None
#
#  Facility: LCLS XLEAP
#
#  Auth: dd-mmm-yyyy, Jeremy Mock   (JMOCK):
#  Rev:  dd-mmm-yyyy, Reviewer's Name (USERNAME)
#--------------------------------------------------------------
#  Mod:
#       09-May-2017, J. Mock        (JMOCK):
#         Initial Release
#       2021-04-07, J. May
#           Manual edits for 53230A; during development, configured 
#           specifically for a laser locker implementation with an 
#           oscillator at 68 MHz. See notes for necessary changes if 
#           you are repurposing this support.
#
#==============================================================
#
#

# Chaning InTerminator for 53230A
InTerminator  = "\r\n53230A>";
#InTerminator = "\r\n";
#InTerminator = "\n";
OutTerminator = CR LF;
#OutTerminator = "\r\n";
ReplyTimeout  =  5000;
ReadTimeout   =  5000;
WriteTimeout  =  10000;
ExtraInput    = Ignore;

# System
GET_IDN             { out "*IDN?";              in "%39c"; }
RESET               { out "*RST";                          }

# Measurement
GET_FREQ            { out "READ?";              in "READ?\r\n%E";}
LASER_TINT	    { out "READ?";		in "READ?\r\n%E";} 
#GET_FREQ            { out "CONF:FREQ;AUT;READ?";              in "CONF:FREQ;AUT;READ?\r\n%E";}
GET_IMPEDANCE       { out "INP:IMP?";			in "INP:IMP?\r\n%{+1.00000000E+006|+5.00000000E+001}";}
SET_IMPEDANCE       { out "INP:IMP %{1.0E6|50}";in "%*s"; @init{ GET_IMPEDANCE;}}
GET_TRIG_LEVEL      { out "INP:LEV:ABS?";       in "INP:LEV:ABS?\r\n%E";}
SET_TRIG_LEVEL      { out "INP:LEV:ABS %E";     in "%*s"; @init{ GET_TRIG_LEVEL;}}
GET_TRIG_PERCENT    { out "INP:LEV:REL?";       in "INP:LEV:REL?\r\n%d";}
SET_TRIG_PERCENT    { out "INP:LEV:REL %d";     in "%*s"; @init{ GET_TRIG_PERCENT;}}
GET_AUTO_LEVEL      { out "INP:LEV:AUTO?";       in "INP:LEV:AUTO?\r\n%{0|1|2}";}
SET_AUTO_LEVEL      { out "INP:LEV:AUTO %{OFF|ON|ONCE}";     in "%*s"; @init{ GET_AUTO_LEVEL;}}
GET_COUPLING        { out "INP:COUP?";			in "INP:COUP?\r\n%{AC|DC}";}
SET_COUPLING        { out "INP:COUP %{AC|DC}";  in "%*s"; @init{ GET_COUPLING;}}
GET_NOISE_REJ       { out "INP:NREJ?";			in "INP:NREJ?\r\n%{0|1}";}
SET_NOISE_REJ       { out "INP:NREJ %{OFF|ON}";  in "%*s"; @init{ GET_NOISE_REJ;}}

# New Additions
SET_TINT_MODE           { out "CONF:TINT %{(@1),(@2)|(@2),(@1)|(@1)|(@2)}"; in "%*S"; @init{}}
GET_TIME_INTERVAL_IMM   { out "MEAS:TINT? %{(@1),(@2)|(@2),(@1)|(@1)|(@2)}";         in "MEAS:TINT?\r\n%E";}
SET_A_TRIG_LEVEL_ABS    { out "INP1:LEV1:ABS %d"; in "%*s"; @init{ GET_A_TRIG_LEVEL;}}
GET_A_TRIG_LEVEL        { out "INP1:LEV1?";      in "INP1:LEV1?\r\n%d";}
SET_B_TRIG_LEVEL_ABS    { out "INP2:LEV1:ABS %d"; in "%*s"; @init{ GET_B_TRIG_LEVEL;}}
GET_B_TRIG_LEVEL        { out "INP2:LEV1?";      in "INP2:LEV1?\r\n%d";}
GET_IN3_FREQ_IMM        { out "MEAS:FREQ? DEF,DEF,(@3)";    in "MEAS:FREQ?\r\n%E";}
GET_RF_SIGSTRENGTH      { out "INP3:STR?";       in "INP3:STR\r\n%{0|1|2|3|4}";}
GET_REFERENCE           { out "SENS:ROSC:SOUR?";  in "SENS:ROSC:SOUR?\r\n%{INT|EXT}";}
SET_REFERENCE           { out "SENS:ROSC:SOUR %{INT|EXT}";  in "%*s"; @init{ GET_REFERENCE;}}
GET_REF_FREQ            { out "SENS:ROSC:EXT:FREQ?";    in "SENS:ROSC:EXT:FREQ?\r\n%{1E6 | 5E6 | 10E6 | MINimum | MAXimum | DEFault}"; }
SET_REF_FREQ            { out "SENS:ROSC:EXT:FREQ %{1E6 | 5E6 | 10E6 | MINimum | MAXimum | DEFault}"; in "%*s"; @init{ GET_REF_FREQ;}}
GET_TRIG_SLOPE          { out "TRIG:SLOP?";   in "TRIG:SLOP?\r\n%{POS|NEG}";}
SET_TRIG_SLOPE          { out "TRIG:SLOP %{POS|NEG}";   in "%*s"; @init{GET_TRIG_SLOPE;}}

# Gate Trigger Controls
GET_TRIG_SOURCE         { out "SENS:GATE:STAR:SOUR?";   in "SENS:GATE:STAR:SOUR?\r\n%{IMM|EXT}";}
SET_TRIG_SOURCE         { out "SENS:GATE:STAR:SOUR %{IMM|EXT}";   in "%*s"; @init{GET_TRIG_SOURCE;}}
GET_FREQ_GATE_TRIG_SOURCE     { out "SENS:FREQ:GATE:SOUR?";   in "SENS:FREQ:GATE:SOUR?\r\n%{TIME|EXT|INP1| INP2|ADV}";}
SET_FREQ_GATE_TRIG_SOURCE     { out "SENS:FREQ:GATE:SOUR %{TIME|EXT|INP1| INP2|ADV}";   in "%*s"; @init{GET_FREQ_GATE_TRIG_SOURCE;}}
GET_TINT_GATE_SOURCE    { out "";   in "";}
SET_TINT_GATE_SOURCE    { out "";   in ""; @init{}}
GET_GATE_START_SOURCE   { out "SENS:GATE:STAR:SOUR?";   in "SENS:GATE:STAR:SOUR?\r\n%{IMM|EXT}";}
SET_GATE_START_SOURCE   { out "SENS:GATE:STAR:SOUR %{IMM|EXT}";   in "%*s"; @init{GET_GATE_START_SOURCE;}}
GET_GATE_START_SLOPE    { out "SENS:GATE:STAR:SLOP?";   in "SENS:GATE:STAR:SLOP?\r\n%{POS|NEG}";}
SET_GATE_START_SLOPE    { out "SENS:GATE:STAR:SLOP %{POS|NEG}";   in "%*s"; @init{ GET_GATE_START_SLOPE;}}


# Math Controls         
GET_SAMPLE_COUNT        { out "SAMP:COUNT?";   in "SAMP:COUNT?\r\n%E";}
SET_SAMPLE_COUNT        { out "SAMP:COUNT %E";   in "%*s"; @init{GET_SAMPLE_COUNT;}}
GET_CALC_STATE          { out "CALC:STAT?";   in "CALC:STAT?\r\n%{OFF|ON}";}
SET_CALC_STATE          { out "CALC:STAT %{OFF|ON}";   in "%*s"; @init{GET_CALC_STATE;}}
GET_CALC_SMOOTHING      { out "CALC:SMO:STAT?";   in "CALC:SMO:STAT?\r\n%{OFF|ON}";}
SET_CALC_SMOOTHING      { out "CALC:SMO:STAT %{OFF|ON}";   in "%*s"; @init{GET_CALC_SMOOTHING;}}
GET_CALC_SMOOTHING_NUM  { out "CALC:SMO:RESP?";   in "CALC:SMO:RESP?\r\n%{SLOW|MED|FAST}";}
SET_CALC_SMOOTHING_NUM  { out "CALC:SMO:RESP %{SLOW|MED|FAST}";   in "%*s"; @init{GET_CALC_SMOOTHING_NUM;}}

# These are laser-specific configuration controls, current set up for test stand operation
SET_LASER_TINT_CHS     { out "CONF:TINT (@1),(@2)"; in "%*s"; }
SET_LASER_INA_COUPLING     { out "INPUT1:COUP AC"; in "%*s"; }
SET_LASER_INB_COUPLING      { out "INPUT2:COUP AC"; in "%*s"; }
SET_LASER_INA_IMPEDANCE     { out "INPUT1:IMP 1000"; in "%*s"; }
SET_LASER_INB_IMPEDANCE     { out "INPUT2:IMP 1000"; in "%*s"; }
SET_LASER_INA_LEVEL         { out "INPUT1:LEVEL 2.2"; in "%*s"; }
SET_LASER_INB_LEVEL         { out "INPUT2:LEVEL 2.2"; in "%*s"; }
SET_LASER_INA_SLOPE         { out "INPUT1:SLOPE POS"; in "%*s"; }
SET_LASER_INB_SLOPE         { out "INPUT2:SLOPE NEG"; in "%*s"; }

GET_TINT_AB	    { out "MEAS:TINT? (@1),(@2)";  in "MEAS:TINT? (@1),(@2)\r\n%E";}
GET_EX_FREQ	    { out "MEAS:FREQ? (@3)";	   in "MEAS:FREQ? (@3)\r\n%E";}